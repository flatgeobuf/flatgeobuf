version: 2.1

executors:
  node:
    docker:
      - image: cimg/node:lts
  java:
    docker:
      - image: cimg/openjdk:17.0
  net:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
  rust:
    docker:
      - image: cimg/rust:1.62.0

commands:
  setup-sccache:
    steps:
      - run:
          name: Install sccache
          command: |
            curl -L -s https://github.com/mozilla/sccache/releases/download/v0.3.0/sccache-v0.3.0-x86_64-unknown-linux-musl.tar.gz | tar xvz --strip-components=1
            chmod +x ./sccache
            sudo mv ./sccache /usr/local/bin/sccache
            # This configures Rust to use sccache.
            echo 'export "RUSTC_WRAPPER"="sccache"' >> $BASH_ENV
            # This is the maximum space sccache cache will use on disk.
            echo 'export "SCCACHE_CACHE_SIZE"="10G"' >> $BASH_ENV
            sccache --version
  restore-sccache-cache:
    steps:
      - restore_cache:
          name: Restore sccache cache
          key: sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
  save-sccache-cache:
    steps:
      - save_cache:
          name: Save sccache cache
          # We use {{ epoch }} to always upload a fresh cache:
          # Of course, restore_cache will not find this exact key,
          # but it will fall back to the closest key (aka the most recent).
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"

jobs:
  test-ts:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-node-dependencies-{{ checksum "yarn.lock" }}
          - v1-node-dependencies-
      - run: yarn
      - save_cache:
          paths:
            - node_modules
          key: v1-node-dependencies-{{ checksum "yarn.lock" }}
      - run:
          name: Run tests
          command: yarn test
      - run:
          name: Run tsc compile
          command: yarn build
      - run:
          name: Run linter
          command: yarn fmt-check


  test-cpp:
    executor: node
    steps:
      - checkout
      - run:
          name: Install Debian dependencies
          command: |
            export DEBIAN_FRONTEND=noninteractive
            sudo apt-get -y update
            sudo apt-get -y install clang
      - run: ./script/getcppdeps.sh
      - run:
          name: Run tests
          command: |
            clang++ -std=c++14 -Wall -Wfloat-conversion -Wmissing-declarations -fsanitize=float-divide-by-zero -g -o ./testcpp -Isrc/cpp/include src/cpp/packedrtree.cpp src/cpp/test/run_tests.cpp
            ./testcpp -d yes

  test-java:
    executor: java
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-java-dependencies-{{ checksum "src/java/pom.xml" }}
            - v1-java-dependencies-
      - run: cd src/java && mvn dependency:go-offline
      - save_cache:
          paths:
            - ~/.m2
          key: v1-java-dependencies-{{ checksum "src/java/pom.xml" }}
      - run: cd src/java && mvn test

  test-net:
    executor: net
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-net-dependencies-{{ checksum "src/net/FlatGeobuf/FlatGeobuf.csproj" }}
            - v1-net-dependencies-
      - run: cd src/net && ./fetch.sh && dotnet test
      - save_cache:
          paths:
            - ~/.nuget/packages
          key: v1-net-dependencies-{{ checksum "src/net/FlatGeobuf/FlatGeobuf.csproj" }}

  test-rust:
    executor: rust
    resource_class: large
    steps:
      - run:
          name: Install Debian dependencies
          command: |
            export DEBIAN_FRONTEND=noninteractive
            sudo apt-get -y update
            sudo apt-get -y install libssl-dev
      - checkout
      #- setup-sccache
      #- restore-sccache-cache
      - run: cd src/rust && cargo test --no-default-features && cargo test
      #- save-sccache-cache

workflows:
  main:
    jobs:
      - test-ts
      - test-cpp
      - test-java
      - test-net
      - test-rust
