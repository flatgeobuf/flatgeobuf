on:
  push:
    branches:
      - master
  pull_request:

name: CI
jobs:
  test-ts:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [ 18, 20, 22 ]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          cache: 'yarn'
      - run: yarn
      - name: Run tests
        run: yarn test
      - name: Run tsc compile
        run: yarn build
      - name: Run linter
        run: yarn fmt-check

  test-cpp:
    runs-on: ubuntu-latest
    steps:
      - name: Install Debian dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get -y update
          sudo apt-get -y install clang
      - uses: actions/checkout@v4
      - run: ./script/getcppdeps.sh
      - name: Build tests and examples
        run: cd src/cpp && make
      - name: Run tests
        run: cd src/cpp && make test

  test-go:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: cd src/go && go test

  test-java:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [21, 17, 11, 8]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Java ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: temurin
          cache: maven
      - run: cd src/java && mvn dependency:go-offline
      - run: cd src/java && mvn test

  test-net8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .Net 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Cache nuget dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget
      - run: cd src/net && ./fetch.sh && dotnet test -f net8

  test-net6:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .Net 6.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 6.0.x
      - name: Cache nuget dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget
      - run: cd src/net && ./fetch.sh && dotnet test -f net6

  test-rust:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Install wasm32-unknown-unknown target
        run: rustup target add wasm32-unknown-unknown
      - name: Install Debian dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get -y update
          sudo apt-get -y install libssl-dev
      - uses: actions/checkout@v4
      - name: Cache dependencies and build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src/rust/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('src/rust/Cargo.toml') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: Tests
        run: cd src/rust && cargo test
      - name: Check wasm build
        run: cd src/rust && cargo check --target wasm32-unknown-unknown


  test-rust-no-default-features:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      - uses: actions/checkout@v4
      - name: Install Debian dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get -y update
          sudo apt-get -y install libssl-dev
      - name: Cache dependencies and build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src/rust/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('src/rust/Cargo.toml') }}
          restore-keys: ${{ runner.os }}-cargo-
      - run: cd src/rust && cargo test --no-default-features
