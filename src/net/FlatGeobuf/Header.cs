// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatGeobuf
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Header : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_22_10_26(); }
  public static Header GetRootAsHeader(ByteBuffer _bb) { return GetRootAsHeader(_bb, new Header()); }
  public static Header GetRootAsHeader(ByteBuffer _bb, Header obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Header __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public double Envelope(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int EnvelopeLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetEnvelopeBytes() { return __p.__vector_as_span<double>(6, 8); }
#else
  public ArraySegment<byte>? GetEnvelopeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public double[] GetEnvelopeArray() { return __p.__vector_as_array<double>(6); }
  public FlatGeobuf.GeometryType GeometryType { get { int o = __p.__offset(8); return o != 0 ? (FlatGeobuf.GeometryType)__p.bb.Get(o + __p.bb_pos) : FlatGeobuf.GeometryType.Unknown; } }
  public bool HasZ { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool HasM { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool HasT { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool HasTm { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public FlatGeobuf.Column? Columns(int j) { int o = __p.__offset(18); return o != 0 ? (FlatGeobuf.Column?)(new FlatGeobuf.Column()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ColumnsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ulong FeaturesCount { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ushort IndexNodeSize { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)16; } }
  public FlatGeobuf.Crs? Crs { get { int o = __p.__offset(24); return o != 0 ? (FlatGeobuf.Crs?)(new FlatGeobuf.Crs()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string Title { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(26); }
  public string Description { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(28); }
  public string Metadata { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMetadataBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetMetadataBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetMetadataArray() { return __p.__vector_as_array<byte>(30); }

  public static Offset<FlatGeobuf.Header> CreateHeader(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset envelopeOffset = default(VectorOffset),
      FlatGeobuf.GeometryType geometry_type = FlatGeobuf.GeometryType.Unknown,
      bool has_z = false,
      bool has_m = false,
      bool has_t = false,
      bool has_tm = false,
      VectorOffset columnsOffset = default(VectorOffset),
      ulong features_count = 0,
      ushort index_node_size = 16,
      Offset<FlatGeobuf.Crs> crsOffset = default(Offset<FlatGeobuf.Crs>),
      StringOffset titleOffset = default(StringOffset),
      StringOffset descriptionOffset = default(StringOffset),
      StringOffset metadataOffset = default(StringOffset)) {
    builder.StartTable(14);
    Header.AddFeaturesCount(builder, features_count);
    Header.AddMetadata(builder, metadataOffset);
    Header.AddDescription(builder, descriptionOffset);
    Header.AddTitle(builder, titleOffset);
    Header.AddCrs(builder, crsOffset);
    Header.AddColumns(builder, columnsOffset);
    Header.AddEnvelope(builder, envelopeOffset);
    Header.AddName(builder, nameOffset);
    Header.AddIndexNodeSize(builder, index_node_size);
    Header.AddHasTm(builder, has_tm);
    Header.AddHasT(builder, has_t);
    Header.AddHasM(builder, has_m);
    Header.AddHasZ(builder, has_z);
    Header.AddGeometryType(builder, geometry_type);
    return Header.EndHeader(builder);
  }

  public static void StartHeader(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddEnvelope(FlatBufferBuilder builder, VectorOffset envelopeOffset) { builder.AddOffset(1, envelopeOffset.Value, 0); }
  public static VectorOffset CreateEnvelopeVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEnvelopeVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnvelopeVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnvelopeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEnvelopeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddGeometryType(FlatBufferBuilder builder, FlatGeobuf.GeometryType geometryType) { builder.AddByte(2, (byte)geometryType, 0); }
  public static void AddHasZ(FlatBufferBuilder builder, bool hasZ) { builder.AddBool(3, hasZ, false); }
  public static void AddHasM(FlatBufferBuilder builder, bool hasM) { builder.AddBool(4, hasM, false); }
  public static void AddHasT(FlatBufferBuilder builder, bool hasT) { builder.AddBool(5, hasT, false); }
  public static void AddHasTm(FlatBufferBuilder builder, bool hasTm) { builder.AddBool(6, hasTm, false); }
  public static void AddColumns(FlatBufferBuilder builder, VectorOffset columnsOffset) { builder.AddOffset(7, columnsOffset.Value, 0); }
  public static VectorOffset CreateColumnsVector(FlatBufferBuilder builder, Offset<FlatGeobuf.Column>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateColumnsVectorBlock(FlatBufferBuilder builder, Offset<FlatGeobuf.Column>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateColumnsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FlatGeobuf.Column>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateColumnsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FlatGeobuf.Column>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartColumnsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFeaturesCount(FlatBufferBuilder builder, ulong featuresCount) { builder.AddUlong(8, featuresCount, 0); }
  public static void AddIndexNodeSize(FlatBufferBuilder builder, ushort indexNodeSize) { builder.AddUshort(9, indexNodeSize, 16); }
  public static void AddCrs(FlatBufferBuilder builder, Offset<FlatGeobuf.Crs> crsOffset) { builder.AddOffset(10, crsOffset.Value, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(11, titleOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(12, descriptionOffset.Value, 0); }
  public static void AddMetadata(FlatBufferBuilder builder, StringOffset metadataOffset) { builder.AddOffset(13, metadataOffset.Value, 0); }
  public static Offset<FlatGeobuf.Header> EndHeader(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatGeobuf.Header>(o);
  }
  public static void FinishHeaderBuffer(FlatBufferBuilder builder, Offset<FlatGeobuf.Header> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedHeaderBuffer(FlatBufferBuilder builder, Offset<FlatGeobuf.Header> offset) { builder.FinishSizePrefixed(offset.Value); }
  public HeaderT UnPack() {
    var _o = new HeaderT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(HeaderT _o) {
    _o.Name = this.Name;
    _o.Envelope = new List<double>();
    for (var _j = 0; _j < this.EnvelopeLength; ++_j) {_o.Envelope.Add(this.Envelope(_j));}
    _o.GeometryType = this.GeometryType;
    _o.HasZ = this.HasZ;
    _o.HasM = this.HasM;
    _o.HasT = this.HasT;
    _o.HasTm = this.HasTm;
    _o.Columns = new List<FlatGeobuf.ColumnT>();
    for (var _j = 0; _j < this.ColumnsLength; ++_j) {_o.Columns.Add(this.Columns(_j).HasValue ? this.Columns(_j).Value.UnPack() : null);}
    _o.FeaturesCount = this.FeaturesCount;
    _o.IndexNodeSize = this.IndexNodeSize;
    _o.Crs = this.Crs.HasValue ? this.Crs.Value.UnPack() : null;
    _o.Title = this.Title;
    _o.Description = this.Description;
    _o.Metadata = this.Metadata;
  }
  public static Offset<FlatGeobuf.Header> Pack(FlatBufferBuilder builder, HeaderT _o) {
    if (_o == null) return default(Offset<FlatGeobuf.Header>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _envelope = default(VectorOffset);
    if (_o.Envelope != null) {
      var __envelope = _o.Envelope.ToArray();
      _envelope = CreateEnvelopeVector(builder, __envelope);
    }
    var _columns = default(VectorOffset);
    if (_o.Columns != null) {
      var __columns = new Offset<FlatGeobuf.Column>[_o.Columns.Count];
      for (var _j = 0; _j < __columns.Length; ++_j) { __columns[_j] = FlatGeobuf.Column.Pack(builder, _o.Columns[_j]); }
      _columns = CreateColumnsVector(builder, __columns);
    }
    var _crs = _o.Crs == null ? default(Offset<FlatGeobuf.Crs>) : FlatGeobuf.Crs.Pack(builder, _o.Crs);
    var _title = _o.Title == null ? default(StringOffset) : builder.CreateString(_o.Title);
    var _description = _o.Description == null ? default(StringOffset) : builder.CreateString(_o.Description);
    var _metadata = _o.Metadata == null ? default(StringOffset) : builder.CreateString(_o.Metadata);
    return CreateHeader(
      builder,
      _name,
      _envelope,
      _o.GeometryType,
      _o.HasZ,
      _o.HasM,
      _o.HasT,
      _o.HasTm,
      _columns,
      _o.FeaturesCount,
      _o.IndexNodeSize,
      _crs,
      _title,
      _description,
      _metadata);
  }
}

public class HeaderT
{
  public string Name { get; set; }
  public List<double> Envelope { get; set; }
  public FlatGeobuf.GeometryType GeometryType { get; set; }
  public bool HasZ { get; set; }
  public bool HasM { get; set; }
  public bool HasT { get; set; }
  public bool HasTm { get; set; }
  public List<FlatGeobuf.ColumnT> Columns { get; set; }
  public ulong FeaturesCount { get; set; }
  public ushort IndexNodeSize { get; set; }
  public FlatGeobuf.CrsT Crs { get; set; }
  public string Title { get; set; }
  public string Description { get; set; }
  public string Metadata { get; set; }

  public HeaderT() {
    this.Name = null;
    this.Envelope = null;
    this.GeometryType = FlatGeobuf.GeometryType.Unknown;
    this.HasZ = false;
    this.HasM = false;
    this.HasT = false;
    this.HasTm = false;
    this.Columns = null;
    this.FeaturesCount = 0;
    this.IndexNodeSize = 16;
    this.Crs = null;
    this.Title = null;
    this.Description = null;
    this.Metadata = null;
  }
  public static HeaderT DeserializeFromBinary(byte[] fbBuffer) {
    return Header.GetRootAsHeader(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Header.FinishHeaderBuffer(fbb, Header.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
