// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatGeobuf
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Geometry : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Geometry GetRootAsGeometry(ByteBuffer _bb) { return GetRootAsGeometry(_bb, new Geometry()); }
  public static Geometry GetRootAsGeometry(ByteBuffer _bb, Geometry obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Geometry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Ends(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int EndsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetEndsBytes() { return __p.__vector_as_span<uint>(4, 4); }
#else
  public ArraySegment<byte>? GetEndsBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public uint[] GetEndsArray() { return __p.__vector_as_array<uint>(4); }
  public double Xy(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int XyLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetXyBytes() { return __p.__vector_as_span<double>(6, 8); }
#else
  public ArraySegment<byte>? GetXyBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public double[] GetXyArray() { return __p.__vector_as_array<double>(6); }
  public double Z(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int ZLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetZBytes() { return __p.__vector_as_span<double>(8, 8); }
#else
  public ArraySegment<byte>? GetZBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public double[] GetZArray() { return __p.__vector_as_array<double>(8); }
  public double M(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int MLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetMBytes() { return __p.__vector_as_span<double>(10, 8); }
#else
  public ArraySegment<byte>? GetMBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public double[] GetMArray() { return __p.__vector_as_array<double>(10); }
  public double T(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int TLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetTBytes() { return __p.__vector_as_span<double>(12, 8); }
#else
  public ArraySegment<byte>? GetTBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public double[] GetTArray() { return __p.__vector_as_array<double>(12); }
  public ulong Tm(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUlong(__p.__vector(o) + j * 8) : (ulong)0; }
  public int TmLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<ulong> GetTmBytes() { return __p.__vector_as_span<ulong>(14, 8); }
#else
  public ArraySegment<byte>? GetTmBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public ulong[] GetTmArray() { return __p.__vector_as_array<ulong>(14); }
  public FlatGeobuf.GeometryType Type { get { int o = __p.__offset(16); return o != 0 ? (FlatGeobuf.GeometryType)__p.bb.Get(o + __p.bb_pos) : FlatGeobuf.GeometryType.Unknown; } }
  public FlatGeobuf.Geometry? Parts(int j) { int o = __p.__offset(18); return o != 0 ? (FlatGeobuf.Geometry?)(new FlatGeobuf.Geometry()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PartsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatGeobuf.Geometry> CreateGeometry(FlatBufferBuilder builder,
      VectorOffset endsOffset = default(VectorOffset),
      VectorOffset xyOffset = default(VectorOffset),
      VectorOffset zOffset = default(VectorOffset),
      VectorOffset mOffset = default(VectorOffset),
      VectorOffset tOffset = default(VectorOffset),
      VectorOffset tmOffset = default(VectorOffset),
      FlatGeobuf.GeometryType type = FlatGeobuf.GeometryType.Unknown,
      VectorOffset partsOffset = default(VectorOffset)) {
    builder.StartTable(8);
    Geometry.AddParts(builder, partsOffset);
    Geometry.AddTm(builder, tmOffset);
    Geometry.AddT(builder, tOffset);
    Geometry.AddM(builder, mOffset);
    Geometry.AddZ(builder, zOffset);
    Geometry.AddXy(builder, xyOffset);
    Geometry.AddEnds(builder, endsOffset);
    Geometry.AddType(builder, type);
    return Geometry.EndGeometry(builder);
  }

  public static void StartGeometry(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddEnds(FlatBufferBuilder builder, VectorOffset endsOffset) { builder.AddOffset(0, endsOffset.Value, 0); }
  public static VectorOffset CreateEndsVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEndsVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEndsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddXy(FlatBufferBuilder builder, VectorOffset xyOffset) { builder.AddOffset(1, xyOffset.Value, 0); }
  public static VectorOffset CreateXyVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateXyVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static void StartXyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddZ(FlatBufferBuilder builder, VectorOffset zOffset) { builder.AddOffset(2, zOffset.Value, 0); }
  public static VectorOffset CreateZVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateZVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static void StartZVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddM(FlatBufferBuilder builder, VectorOffset mOffset) { builder.AddOffset(3, mOffset.Value, 0); }
  public static VectorOffset CreateMVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static void StartMVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddT(FlatBufferBuilder builder, VectorOffset tOffset) { builder.AddOffset(4, tOffset.Value, 0); }
  public static VectorOffset CreateTVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static void StartTVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddTm(FlatBufferBuilder builder, VectorOffset tmOffset) { builder.AddOffset(5, tmOffset.Value, 0); }
  public static VectorOffset CreateTmVector(FlatBufferBuilder builder, ulong[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddUlong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTmVectorBlock(FlatBufferBuilder builder, ulong[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static void StartTmVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddType(FlatBufferBuilder builder, FlatGeobuf.GeometryType type) { builder.AddByte(6, (byte)type, 0); }
  public static void AddParts(FlatBufferBuilder builder, VectorOffset partsOffset) { builder.AddOffset(7, partsOffset.Value, 0); }
  public static VectorOffset CreatePartsVector(FlatBufferBuilder builder, Offset<FlatGeobuf.Geometry>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePartsVectorBlock(FlatBufferBuilder builder, Offset<FlatGeobuf.Geometry>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPartsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatGeobuf.Geometry> EndGeometry(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatGeobuf.Geometry>(o);
  }
  public GeometryT UnPack() {
    var _o = new GeometryT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GeometryT _o) {
    _o.Ends = new List<uint>();
    for (var _j = 0; _j < this.EndsLength; ++_j) {_o.Ends.Add(this.Ends(_j));}
    _o.Xy = new List<double>();
    for (var _j = 0; _j < this.XyLength; ++_j) {_o.Xy.Add(this.Xy(_j));}
    _o.Z = new List<double>();
    for (var _j = 0; _j < this.ZLength; ++_j) {_o.Z.Add(this.Z(_j));}
    _o.M = new List<double>();
    for (var _j = 0; _j < this.MLength; ++_j) {_o.M.Add(this.M(_j));}
    _o.T = new List<double>();
    for (var _j = 0; _j < this.TLength; ++_j) {_o.T.Add(this.T(_j));}
    _o.Tm = new List<ulong>();
    for (var _j = 0; _j < this.TmLength; ++_j) {_o.Tm.Add(this.Tm(_j));}
    _o.Type = this.Type;
    _o.Parts = new List<FlatGeobuf.GeometryT>();
    for (var _j = 0; _j < this.PartsLength; ++_j) {_o.Parts.Add(this.Parts(_j).HasValue ? this.Parts(_j).Value.UnPack() : null);}
  }
  public static Offset<FlatGeobuf.Geometry> Pack(FlatBufferBuilder builder, GeometryT _o) {
    if (_o == null) return default(Offset<FlatGeobuf.Geometry>);
    var _ends = default(VectorOffset);
    if (_o.Ends != null) {
      var __ends = _o.Ends.ToArray();
      _ends = CreateEndsVector(builder, __ends);
    }
    var _xy = default(VectorOffset);
    if (_o.Xy != null) {
      var __xy = _o.Xy.ToArray();
      _xy = CreateXyVector(builder, __xy);
    }
    var _z = default(VectorOffset);
    if (_o.Z != null) {
      var __z = _o.Z.ToArray();
      _z = CreateZVector(builder, __z);
    }
    var _m = default(VectorOffset);
    if (_o.M != null) {
      var __m = _o.M.ToArray();
      _m = CreateMVector(builder, __m);
    }
    var _t = default(VectorOffset);
    if (_o.T != null) {
      var __t = _o.T.ToArray();
      _t = CreateTVector(builder, __t);
    }
    var _tm = default(VectorOffset);
    if (_o.Tm != null) {
      var __tm = _o.Tm.ToArray();
      _tm = CreateTmVector(builder, __tm);
    }
    var _parts = default(VectorOffset);
    if (_o.Parts != null) {
      var __parts = new Offset<FlatGeobuf.Geometry>[_o.Parts.Count];
      for (var _j = 0; _j < __parts.Length; ++_j) { __parts[_j] = FlatGeobuf.Geometry.Pack(builder, _o.Parts[_j]); }
      _parts = CreatePartsVector(builder, __parts);
    }
    return CreateGeometry(
      builder,
      _ends,
      _xy,
      _z,
      _m,
      _t,
      _tm,
      _o.Type,
      _parts);
  }
}

public class GeometryT
{
  public List<uint> Ends { get; set; }
  public List<double> Xy { get; set; }
  public List<double> Z { get; set; }
  public List<double> M { get; set; }
  public List<double> T { get; set; }
  public List<ulong> Tm { get; set; }
  public FlatGeobuf.GeometryType Type { get; set; }
  public List<FlatGeobuf.GeometryT> Parts { get; set; }

  public GeometryT() {
    this.Ends = null;
    this.Xy = null;
    this.Z = null;
    this.M = null;
    this.T = null;
    this.Tm = null;
    this.Type = FlatGeobuf.GeometryType.Unknown;
    this.Parts = null;
  }
}


}
